<!DOCTYPE html>
<html lang="en-us">
<head>
    <meta charset="UTF-8">
    <title>pyBlock</title>
    <link type="text/css" href="/StylesPages/PlayStyle.css" rel="stylesheet">

    <!-- Include Blockly core library and blocks -->
    <script src="https://unpkg.com/blockly/blockly.min.js"></script>
    <script src="https://unpkg.com/blockly/python.min.js"></script>
    
    <!-- Local copies of Blockly libraries as fallback -->
    <script src="../../node_modules/blockly/blockly_compressed.js"></script>
    <script src="../../node_modules/blockly/blocks_compressed.js"></script>
    <script src="../../node_modules/blockly/python_compressed.js"></script>

    <!-- Include custom blocks and generators -->
    <!--<script src="/src/blocks/custom_blocks.js"></script>-->
    
    <!-- Load Blockly messages -->
    <script src="../../node_modules/blockly/msg/en.js"></script>
    
    <!-- Toolbox and main JavaScript file -->
    <script type="module" src="../toolbox.js"></script>
    <script type="module" src="../index.js"></script>

    <!-- Add this in the head section -->
    <script src="/Public/Guides/projectTutorialGuides.js"></script>
</head>
<body>

<!-- NAV BAR START -->
<header class="navigation" role="banner">
    
  <!-- List for the logo on the page -->
  <nav aria-label="Main Navigation">
  <ul class="navbar_logo">
    <li>
      <a href="/api/home" aria-label="Link to home page">
        <img class="logo" src="/ImagesUsed/pyBlocks_Updated.png" alt="PyBlocks logo, linking back to home page">
      </a>
    </li>
  </ul>

  <!-- List for the Buttons on the navigation pane -->
  <ul class="navbar_buttons_list" aria-label="Primary navigation buttons">
    <li>
      <a href="#contact" aria-label="Contact Us page (Coming soon)">
        <button class="Nav_Buttons" aria-disabled="true">Contact Us</button> <!-- TBC in another sprint -->
      </a>
    </li>
    <li>
      <a href="#tutorials" aria-label="Tutorials page (Coming soon)">
        <button class="Nav_Buttons" aria-disabled="true">Tutorials</button> <!-- TBC in another sprint -->
      </a>
    </li>
    <li>
      <a href="/api/play" aria-label="Play page">
        <button class="Nav_Buttons" aria-label="Start coding by going to the Play page">Play</button>
      </a>
    </li>
    <li>
      <a href="#courses" aria-label="Courses page (Coming soon)">
        <button class="Nav_Buttons" aria-disabled="true">Courses</button> <!-- TBC in another sprint -->
      </a>
    </li>
    <li>
      <a href="#resources" aria-label="Resources page (Coming soon)">
        <button class="Nav_Buttons" aria-disabled="true">Resources</button> <!-- TBC in another sprint -->
      </a>
    </li>
    <li>
        <% if (locals.user && locals.user !== null) { %>
          <a href="/api/dashboard">
            <button class="Nav_Buttons" aria-label="Go to dashboard">Dashboard</button>
          </a>
        <% } else { %>
          <a href="/api/login">
            <button class="Nav_Buttons" aria-label="Sign in to your account">Sign In</button>
          </a>
        <% } %>
      </li>
    <li>
      <a href="/api/register" aria-label="Registration page">
        <button class="Nav_Buttons">Register</button>
      </a>
    </li>
  </ul>
  <ul class="Settings_logo" aria-label="Settings navigation">
    <li>
      <a href="/api/settings" aria-label="Settings page">
        <img class="Settings_logo" src="/ImagesUsed/SettingsIcon.png" alt="Settings logo, linking to settings page">
      </a>
    </li>
  </ul>
</nav>
</header>
<!-- NAV BAR END -->

<!-- BODY START -->
<div class="PlayPage_Body" role="main" aria-label="Play page main content">
    <!-- Header above everything -->
    <div class="category-header" role="region" aria-label="Workspace Controls">
        <span class="category-title" id="viewModeLabel" aria-live="polite">Block View</span>
        <label class="toggleSwitch" aria-labelledby="viewModeLabel">
            <input type="checkbox" 
                   id="toggleSwitch" 
                   aria-label="Toggle between block and code view"
                   role="switch"
                   aria-checked="false" />
            <span class="slider" aria-hidden="true"></span>
        </label>
        <% if (locals.tutorialMode) { %>
            <button id="saveProgressBtn" 
                    class="save-progress-btn" 
                    aria-label="Save tutorial progress and return to projects page">
                Save Progress & Return
            </button>
        <% } %>
    </div>

    <div class="workspace-container" role="main" aria-label="Programming workspace">
        <!-- Complete toolbox with all blocks -->
        <xml xmlns="https://developers.google.com/blockly/xml" id="toolbox" style="display: none">
            <category name="Logic" categorystyle="logic_category" aria-label="Logic programming blocks">
                <block type="controls_if"></block>
                <block type="logic_compare"></block>
                <block type="logic_operation"></block>
                <block type="logic_negate"></block>
                <block type="logic_boolean"></block>
                <block type="logic_null" disabled="true"></block>
                <block type="logic_ternary"></block>
            </category>
            <category name="Loops" categorystyle="loop_category" aria-label="Loop programming blocks">
                <block type="controls_repeat_ext">
                    <value name="TIMES">
                        <shadow type="math_number">
                            <field name="NUM">10</field>
                        </shadow>
                    </value>
                </block>
                <block type="controls_repeat" disabled="true"></block>
                <block type="controls_whileUntil"></block>
                <block type="controls_for">
                    <value name="FROM"><shadow type="math_number"><field name="NUM">1</field></shadow></value>
                    <value name="TO"><shadow type="math_number"><field name="NUM">10</field></shadow></value>
                    <value name="BY"><shadow type="math_number"><field name="NUM">1</field></shadow></value>
                </block>
                <block type="controls_forEach"></block>
                <block type="controls_flow_statements"></block>
            </category>
            <category name="Math" categorystyle="math_category" aria-label="Math blocks">
                <block type="math_number" gap="32">
                    <field name="NUM">123</field>
                </block>
                <block type="math_arithmetic">
                    <value name="A"><shadow type="math_number"><field name="NUM">1</field></shadow></value>
                    <value name="B"><shadow type="math_number"><field name="NUM">1</field></shadow></value>
                </block>
                <block type="math_single">
                    <value name="NUM"><shadow type="math_number"><field name="NUM">9</field></shadow></value>
                </block>
                <block type="math_trig">
                    <value name="NUM"><shadow type="math_number"><field name="NUM">45</field></shadow></value>
                </block>
                <block type="math_constant"></block>
                <block type="math_number_property">
                    <value name="NUMBER_TO_CHECK"><shadow type="math_number"><field name="NUM">0</field></shadow></value>
                </block>
                <block type="math_round">
                    <value name="NUM"><shadow type="math_number"><field name="NUM">3.1</field></shadow></value>
                </block>
                <block type="math_on_list"></block>
                <block type="math_modulo">
                    <value name="DIVIDEND"><shadow type="math_number"><field name="NUM">64</field></shadow></value>
                    <value name="DIVISOR"><shadow type="math_number"><field name="NUM">10</field></shadow></value>
                </block>
                <block type="math_constrain">
                    <value name="VALUE"><shadow type="math_number"><field name="NUM">50</field></shadow></value>
                    <value name="LOW"><shadow type="math_number"><field name="NUM">1</field></shadow></value>
                    <value name="HIGH"><shadow type="math_number"><field name="NUM">100</field></shadow></value>
                </block>
                <block type="math_random_int">
                    <value name="FROM"><shadow type="math_number"><field name="NUM">1</field></shadow></value>
                    <value name="TO"><shadow type="math_number"><field name="NUM">100</field></shadow></value>
                </block>
                <block type="math_random_float"></block>
                <block type="math_atan2">
                    <value name="X"><shadow type="math_number"><field name="NUM">1</field></shadow></value>
                    <value name="Y"><shadow type="math_number"><field name="NUM">1</field></shadow></value>
                </block>
            </category>
            <category name="Text" categorystyle="text_category" aria-label="Text blocks">
                <block type="text"></block>
                <block type="text_print">
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT">abc</field>
                        </shadow>
                    </value>
                </block>
                <block type="text_join"></block>
                <block type="text_append">
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT">abc</field>
                        </shadow>
                    </value>
                </block>
                <block type="text_length">
                    <value name="VALUE">
                        <shadow type="text">
                            <field name="TEXT">abc</field>
                        </shadow>
                    </value>
                </block>
                <block type="text_isEmpty">
                    <value name="VALUE">
                        <shadow type="text">
                            <field name="TEXT">abc</field>
                        </shadow>
                    </value>
                </block>
                <block type="text_indexOf">
                    <value name="VALUE"><block type="variables_get"></block></value>
                    <value name="FIND"><shadow type="text"><field name="TEXT">abc</field></shadow></value>
                </block>
                <block type="text_charAt">
                    <value name="VALUE"><block type="variables_get"></block></value>
                </block>
                <block type="text_getSubstring">
                    <value name="STRING"><block type="variables_get"></block></value>
                </block>
                <block type="text_changeCase">
                    <value name="TEXT"><shadow type="text"><field name="TEXT">abc</field></shadow></value>
                </block>
                <block type="text_trim">
                    <value name="TEXT"><shadow type="text"><field name="TEXT">abc</field></shadow></value>
                </block>
                <block type="text_print">
                    <value name="TEXT"><shadow type="text"><field name="TEXT">abc</field></shadow></value>
                </block>
                <block type="text_prompt_ext">
                    <value name="TEXT"><shadow type="text"><field name="TEXT">abc</field></shadow></value>
                </block>
                <block type="text_count">
                    <value name="SUB"><shadow type="text"></shadow></value>
                    <value name="TEXT"><shadow type="text"></shadow></value>
                </block>
                <block type="text_replace">
                    <value name="FROM"><shadow type="text"></shadow></value>
                    <value name="TO"><shadow type="text"></shadow></value>
                    <value name="TEXT"><shadow type="text"></shadow></value>
                </block>
                <block type="text_reverse">
                    <value name="TEXT"><shadow type="text"></shadow></value>
                </block>
                <label text="Input/Output:" web-class="ioLabel"></label>
            </category>
            <category name="Lists" categorystyle="list_category" aria-label="List blocks">
                <block type="lists_create_with"><mutation items="0"></mutation></block>
                <block type="lists_create_with"></block>
                <block type="lists_repeat">
                    <value name="NUM"><shadow type="math_number"><field name="NUM">5</field></shadow></value>
                </block>
                <block type="lists_length"></block>
                <block type="lists_isEmpty"></block>
                <block type="lists_indexOf">
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR">list</field>
                        </block>
                    </value>
                </block>
                <block type="lists_getIndex">
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR">list</field>
                        </block>
                    </value>
                </block>
                <block type="lists_setIndex">
                    <value name="LIST">
                        <block type="variables_get">
                            <field name="VAR">list</field>
                        </block>
                    </value>
                </block>
                <block type="lists_getSublist">
                    <value name="LIST">
                        <block type="variables_get">
                            <field name="VAR">list</field>
                        </block>
                    </value>
                </block>
                <block type="lists_split">
                    <value name="DELIM">
                        <shadow type="text">
                            <field name="TEXT">,</field>
                        </shadow>
                    </value>
                </block>
                <block type="lists_sort"></block>
                <block type="lists_reverse"></block>
            </category>
            <sep></sep>
            <category name="Variables" categorystyle="variable_category" custom="VARIABLE" aria-label="Variable blocks"></category>
            <category name="Functions" categorystyle="procedure_category" custom="PROCEDURE" aria-label="Function blocks"></category>
            <category name="Custom Blocks" colour="210" aria-label="Custom blocks">
                <block type="custom_print"></block>
                 <!-- Add any other custom blocks here -->
            </category>
        </xml> 

        <!-- Middle panel: Blockly workspace -->
        <div id="blocklyDiv" 
             role="application" 
             aria-label="Block programming workspace"
             aria-description="Drag and drop blocks from the toolbox to create your program"></div>

        <!-- Right panel: Code output -->
        <div id="code-pane" 
             role="complementary" 
             aria-label="Generated Python code">
            <h2 id="codeOutputLabel">Generated Python Code</h2>
            <pre id="output" 
                 aria-labelledby="codeOutputLabel" 
                 aria-live="polite"
                 tabindex="0"></pre>
        </div>
    </div>
</div>

<!-- Blockly workspace initialization script -->
<script>
    // Initialize Blockly workspace with the toolbox and specific container
    const workspace = Blockly.inject('blocklyDiv', {
        toolbox: document.getElementById('toolbox'),
        toolboxPosition: 'start',
        horizontalLayout: false,
        toolboxContainer: 'toolbox-container',
        scrollbars: true,
        trashcan: true,
        sounds: true,  
        grid: {
            spacing: 20,
            length: 20,
            colour: '#f5f5f5',
            snap: true
        },
        zoom: {
            controls: true,
            wheel: true,
            startScale: 1.0,
            maxScale: 3,
            minScale: 0.3,
            scaleSpeed: 1.2
        },
        move: {
            scrollbars: true,
            drag: true,
            wheel: true
        }
    });

    const isTutorialMode = '<%= locals.tutorialMode %>' === 'true';
    const tutorialId = '<%= locals.tutorialId || "" %>';
    
    if (isTutorialMode) {
        // Initialize tutorial guide
        const guide = new TutorialGuide(workspace, tutorialId);
        window.tutorialGuide = guide; // Make it globally accessible
    }

    // Function to generate Python code from blocks and display it
    function generateCode() {
        try {
            const code = Blockly.Python.workspaceToCode(workspace);
            const outputElement = document.getElementById('output');
            outputElement.textContent = code || "No code generated.";
            outputElement.setAttribute('aria-label', 'Generated Python code: ' + (code || "No code generated."));
        } catch (e) {
            const outputElement = document.getElementById('output');
            const errorMessage = "Error generating code: " + e.message;
            outputElement.textContent = errorMessage;
            outputElement.setAttribute('aria-label', errorMessage);
        }
    }

    // Trigger code generation whenever the workspace changes
    workspace.addChangeListener(generateCode);

    // Set initial display styles
    document.addEventListener('DOMContentLoaded', function() {
        const outputPane = document.getElementById('code-pane');
        const blocklyDiv = document.getElementById('blocklyDiv');

        // Initially show blocklyDiv and hide outputPane
        outputPane.style.display = 'none';
        blocklyDiv.style.display = 'block';
    });

    // Switch for going from Block to Python and vice versa
    document.getElementById('toggleSwitch').addEventListener('change', function() {
        const outputPane = document.getElementById('code-pane');
        const blocklyDiv = document.getElementById('blocklyDiv');
        const viewModeLabel = document.getElementById('viewModeLabel');
        const isCodeView = this.checked;
        
        if (isCodeView) {
            outputPane.style.display = 'block';
            blocklyDiv.style.display = 'none';
            viewModeLabel.textContent = 'Code View';
        } else {
            outputPane.style.display = 'none';
            blocklyDiv.style.display = 'block';
            viewModeLabel.textContent = 'Block View';
        }
        
        // Update ARIA states
        this.setAttribute('aria-checked', isCodeView);
        this.setAttribute('aria-label', `Switch to ${isCodeView ? 'block' : 'code'} view`);
        
        // Announce view change
        const announcement = `Switched to ${isCodeView ? 'code' : 'block'} view`;
        const ariaAnnouncement = document.createElement('div');
        ariaAnnouncement.setAttribute('role', 'status');
        ariaAnnouncement.setAttribute('aria-live', 'polite');
        ariaAnnouncement.textContent = announcement;
        document.body.appendChild(ariaAnnouncement);
        setTimeout(() => ariaAnnouncement.remove(), 1000);
    });

    document.getElementById('saveProgressBtn').addEventListener('click', async function() {
        try {
            const workspace = Blockly.getMainWorkspace();
            
            // Get the workspace state
            const workspaceState = Blockly.serialization.workspaces.save(workspace);
            console.log('Saving workspace state:', workspaceState); // Debug log

            let currentStep = 0;
            if (window.tutorialGuide) {
                currentStep = window.tutorialGuide.getCurrentStep() + 1;
                console.log('Saving progress - Current step:', currentStep);
            }

            const tutorialId = '<%= locals.tutorialId %>' || '';
            console.log('Tutorial ID:', tutorialId); // Debug log

            const payload = {
                tutorialId: tutorialId,
                currentStep: currentStep,
                workspaceState: workspaceState
            };

            console.log('Sending payload:', {
                ...payload,
                workspaceState: 'Workspace data included'
            });

            const response = await fetch('/api/project-tutorials/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
            }

            const responseData = await response.json();
            console.log('Server response:', responseData);

            if (responseData.status === 'success') {
                window.location.href = '/api/project-tutorials';
            } else {
                alert('Failed to save progress: ' + (responseData.error || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error saving progress:', error);
            alert('Error saving progress: ' + error.message);
        }
    });

    // Add this function to load the saved state when the page loads
    async function loadSavedState() {
        try {
            console.log('Starting to load saved state...');
            
            const response = await fetch('/api/project-tutorials/fetch');
            if (!response.ok) {
                throw new Error('Failed to fetch saved state');
            }
            
            const data = await response.json();
            console.log('Full data received from server:', data);
            
            const tutorialId = '<%= locals.tutorialId %>' || '';
            if (!tutorialId) {
                console.log('No tutorial ID provided');
                return;
            }

            // Map tutorial IDs to project numbers
            const projectMapping = {
                'hello-world': '1',
                'loops-intro': '2',
                'variables-basic': '3'
            };

            const projectNumber = projectMapping[tutorialId];
            if (!projectNumber) {
                console.log('Unknown tutorial ID:', tutorialId);
                return;
            }

            const progressField = `project${projectNumber}_progress`;

            if (data.workspace_state) {
                console.log('Found workspace state, attempting to load...');
                try {
                    // Clear the workspace
                    workspace.clear();
                    
                    // Temporarily disable events
                    Blockly.Events.disable();
                    
                    try {
                        // Load the saved state
                        Blockly.serialization.workspaces.load(data.workspace_state, workspace);
                        
                        // Make sure all blocks are editable and movable
                        workspace.getAllBlocks(false).forEach(block => {
                            block.setEditable(true);
                            block.setMovable(true);
                            block.setDeletable(true);
                            if (block.workspace) {
                                block.initSvg();
                                block.render();
                            }
                        });
                    } finally {
                        // Re-enable events
                        Blockly.Events.enable();
                    }
                    
                    // Resize and center
                    Blockly.svgResize(workspace);
                    workspace.scrollCenter();
                    
                    // Force a complete workspace render
                    workspace.render();
                    
                    console.log('Workspace state loaded successfully');
                } catch (e) {
                    console.error('Error loading workspace state:', e);
                }
            }

            // Load tutorial progress
            if (window.tutorialGuide && data[progressField]) {
                const progress = parseFloat(data[progressField]);
                const step = Math.max(0, Math.floor((progress / 100) * 6));
                window.tutorialGuide.setStep(step);
            }
        } catch (error) {
            console.error('Error in loadSavedState:', error);
        }
    }

    // Initialize workspace and load saved state
    const GetWorkspace = Blockly.getMainWorkspace();
    GetWorkspace.addChangeListener(function(e) {
        if (e.type === Blockly.Events.FINISHED_LOADING) {
            loadSavedState();
        }
    });

    // Also try loading immediately
    loadSavedState();

    // Add this to ensure the workspace is properly initialized before loading state
    Blockly.svgResize(workspace);

    // Add keyboard navigation for the code output
    document.getElementById('output').addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            // Select all text in the output
            const selection = window.getSelection();
            const range = document.createRange();
            range.selectNodeContents(this);
            selection.removeAllRanges();
            selection.addRange(range);
        }
    });
</script>
<!-- BODY END -->

<!-- FOOTER START -->
<footer role="contentinfo" aria-label="Footer navigation">

    <!-- List for the logo on the page -->
    <ul class="navbar_logo">
      <li>
        <a href="/api/home">
          <img class = logo src = "/ImagesUsed/pyBlocks_Updated.png" alt = "PyBlocks logo, linking back to home page">
        </a>
      </li>
    </ul>
  
    <!-- List for the links in the footer -->
    <ul class="footer_buttons">
      <li><a href="#resources" aria-label="Resources section (Coming soon)">Resources</a></li>
      <li><a href="#tutorials" aria-label="Tutorials section (Coming soon)">Tutorials</a></li>
      <li><a href="#editors" aria-label="Open blank editors (Coming soon)">Open Blank Editors</a></li>
    </ul>
    <!-- holds links and some navigation, may add more later -->
  </footer>
  <!-- FOOTER END -->
  </body>
  </html>  